{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter1/":{"url":"classOne/chapter1/","title":"单体项目","keywords":"","body":"一个成熟的后台架构图示： "},"classOne/chapter1/lesson1/":{"url":"classOne/chapter1/lesson1/","title":"框架设计与准备","keywords":"","body":"1. 整体知识点2. SpringBoot VS SpringMVC3. 技术选型考虑4. 前后端开发模式(MVVM)1. 整体知识点 后台分层架构模式 数据库表设计 SpringBoot Spring Mybatis 整合 2. SpringBoot VS SpringMVC SpringBoot SpringMVC 是(整合了很多功能的)工具 是框架 零配置 yml 配置繁琐 xml 集成了很多中间件*.stater 内置 tomcat 外置置 tomcat 3. 技术选型考虑 切合业务 社区活跃度 团队技术水平 版本更新迭代周期 试错精神-多体验、多测试 安全性 成功案例 开源精神 4. 前后端开发模式(MVVM) 构建聚合项目 "},"classOne/chapter1/lesson1/databse.html":{"url":"classOne/chapter1/lesson1/databse.html","title":"数据库","keywords":"","body":"1. 数据库建模工具1.1. PDMan for Mac1.1.1. 设置1.1.2. 数据库连接1.1.3. 关系图1.1.4. 模型1.1.5. 版本模型1. 数据库建模工具 1.1. PDMan for Mac 官方网站 1.1.1. 设置 选择设置所展示的界面中的字段是默认的字段。 1.1.2. 数据库连接 url : jdbc:mysql://IP地址:端口号/数据库名?characterEncoding=UTF-8&useSSL=false&useUnicode=true&serverTimezone=UTC IP地址: 本地测试写localhost 端口号: 3306 数据库名: test ,数据库字符集推荐选择utf8mb4,可支持emoji表情。 1.1.3. 关系图 1.1.4. 模型 1.1.5. 版本模型 作用：可把表导出到数据库中，并且产生对应的版本。 创建基线把设计好的数据表导入到数据库中： 当字段更新了再次同步到数据库中，有两种升级方式：重建数据表、字段增量，项目开发中推荐使用后者。 "},"classOne/chapter1/lesson1/createProj.html":{"url":"classOne/chapter1/lesson1/createProj.html","title":"构建聚合项目","keywords":"","body":"1. 通过IDE构建聚合项目1.1. 创建顶层的pom项目1.2. 创建子模块工程1.3. 设置子模块之间的依赖1.4. 创建完整的聚合工程1.5. 安装聚合项目1.6. 为pom工程添加依赖1.7. 创建配置文件、启动类1.7.1. 创建一个测试类2. HikariCP连接数据源2.1. pom添加依赖2.2. 添加配置文件3. IDE快捷键3.1. 展开项目目录3.2. 文件分屏展示构建一个具体的聚合项目简单结构： 1. 通过IDE构建聚合项目 1.1. 创建顶层的pom项目 GroupId : 公司唯一ID。 ArtifcatId : 项目名。 Version : 版本号。 1.2. 创建子模块工程 聚合工程里可以分为顶级项目（顶级工程、父工程）与子工程，这两者的关系其实就是父子继承的关系。 子工程在maven里称之为模块（module），模块之间是平级，是可以相互依赖的。 子模块可以使用顶级工程里所有的资源（依赖），子模块之间如果要使用资源，必须构建依赖（构建关系） 一个顶级工程是可以由多个不同的子工程共同组合而成。 所有的子模块都是以一个 jar包存在于顶级工程里面的。 1.3. 设置子模块之间的依赖 现在子模块foodie-dev-common 、foodie-dev-pojo都继承自顶级依赖foodie-dev，现在foodie-dev-pojo子模块需要依赖foodie-dev-common子模块： 结果： com.imooc foodie-dev-common 1.0-SNAPSHOT 1.4. 创建完整的聚合工程 现在我们需要创建完成的聚合工程，下面是对应的顶级工程和其子模块的模块名： foodie-dev: 顶级pom工程 foodie-dev-common : 子模块 foodie-dev-pojo : 子模块 foodie-dev-mapper : 子模块 foodie-dev-service : 子模块 foodie-dev-api : 子模块 子模块之间的继承关系为：common -> pojo -> mapper -> service -> api 1.5. 安装聚合项目 1.6. 为pom工程添加依赖 parent 依赖：依赖这个就表示这个项目就是个SpringBoot项目。 org.springframework.boot spring-boot-starter-parent 2.1.5.RELEASE 设置资源属性： UTF-8 UTF-8 1.8 添加依赖 org.springframework.boot spring-boot-starter org.springframework.boot spring-boot-starter-logging org.springframework.boot spring-boot-starter-web org.springframework.boot spring-boot-configuration-processor true 1.7. 创建配置文件、启动类 package com.imooc; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class,args); } } 1.7.1. 创建一个测试类 最后可以直接访问：http://localhost:8080/hello 2. HikariCP连接数据源 HikariCP是官方的工具。Github 2.1. pom添加依赖 mysql mysql-connector-java 8.0.20 org.mybatis.spring.boot mybatis-spring-boot-starter 2.1.3 2.2. 添加配置文件 ############################################################ # 配置数据源信息 ############################################################ spring: datasource: # 数据源的相关配置 type: com.zaxxer.hikari.HikariDataSource # 数据源类型：HikariCP driver-class-name: com.mysql.jdbc.Driver # mysql驱动 url: jdbc:mysql://localhost:3306/foodie-shop-dev?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true username: root password: root hikari: connection-timeout: 30000 # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒 minimum-idle: 5 # 最小连接数 maximum-pool-size: 20 # 最大连接数 auto-commit: true # 自动提交 idle-timeout: 600000 # 连接超时的最大时长（毫秒），超时则被释放（retired），默认:10分钟 pool-name: DateSourceHikariCP # 连接池名字 max-lifetime: 1800000 # 连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms connection-test-query: SELECT 1 ############################################################ # mybatis 配置 ############################################################ mybatis: type-aliases-package: com.imooc.pojo # 所有POJO类所在包路径,com.imooc.pojo是本项目pojo的路径。 mapper-locations: classpath:mapper/*.xml # mapper映射文件 ############################################################ # web访问端口号 约定：8088 ############################################################ server: port: 8088 tomcat: uri-encoding: UTF-8 max-http-header-size: 80KB 3. IDE快捷键 3.1. 展开项目目录 点击项目根目录 + 按*键：展开所有目录结构 3.2. 文件分屏展示 "},"classOne/chapter1/lesson2/":{"url":"classOne/chapter1/lesson2/","title":"SpringBoot补充","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter1/lesson3/":{"url":"classOne/chapter1/lesson3/","title":"登录注册开发","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter2/":{"url":"classOne/chapter2/","title":"集群项目","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter3/":{"url":"classOne/chapter3/","title":"分布式架构","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter4/":{"url":"classOne/chapter4/","title":"SpringCloud","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter5/":{"url":"classOne/chapter5/","title":"服务容器化","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "},"classOne/chapter6/":{"url":"classOne/chapter6/","title":"高性能网络通信","keywords":"","body":"1. Introduction1. Introduction [danger] 提示 如果需要评论需要梯子！ "}}